(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/web2py/new/applications/init/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\nfrom applications.init.modules.sets import *\nis_phone = IS_MATCH(\'^(\\+)?(\\+\\d{2}\\-)?[\\d\\-]*(\\#\\d+)?$\')\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    from gluon.contrib.login_methods.gae_google_account import GaeGoogleAccount\n    auth.settings.login_form = GaeGoogleAccount()\n\nauth.settings.table_user = db.define_table(\'auth_user\',    \n    Field(\'first_name\', length=512,default=\'\'),\n    Field(\'last_name\', length=512,default=\'\'),\n    Field(\'email\', length=512,default=\'\',\n          requires = [IS_EMAIL(),IS_NOT_IN_DB(db,\'auth_user.email\')]),\n    Field(\'employed\', \'date\', label=T("Employed date")),\n    Field(\'montly\', \'integer\', label=T("Montly wage")),\n    Field(\'password\', \'password\', readable=False,\n          label=\'Password\',\n          requires=CRYPT(auth.settings.hmac_key)),\n    Field(\'registration_key\', length=512,\n          writable=False, readable=False,default=\'\'),\n    Field(\'reset_password_key\', length=512,\n          writable=False, readable=False, default=\'\'))\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:79799e9f-a589-4faf-8a4a-ffa8e67a7674\'   # before define_tables()\nauth.settings.create_user_groups = False\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table(\'customers\',\n    Field(\'name\',\'string\'),\n    Field(\'piva\',\'string\'),\n    Field(\'email\',\'string\'),\n    Field(\'address_num\',\'string\'),\n    Field(\'address_road\',\'string\'),\n    Field(\'address_city\',\'string\'),\n    Field(\'address_county\',\'string\'),\n    Field(\'address_zip\',\'string\'),\n    Field(\'address_state\',\'string\'),\n    Field(\'mobile\',\'string\'),\n    Field(\'phone\',\'string\'),\n    Field(\'fax\',\'string\'))\n    \ndb.customers.name.label=T("Name")\ndb.customers.name.requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'customers.name\')]\ndb.customers.piva.label=T("P IVA")\ndb.customers.piva.requires=IS_NOT_EMPTY()\ndb.customers.email.label=T("E-Mail")\ndb.customers.address_num.label=T("Street Number")\ndb.customers.address_road.label=T("Street")\ndb.customers.address_city.label=T("City")\ndb.customers.address_county.label=T("County")\ndb.customers.address_zip.label=T("ZIP Code")\ndb.customers.address_state.label=T("State")\ndb.customers.address_state.requires = IS_IN_SET(STATES,[T(x) for x in STATES])\ndb.customers.address_state.default = "Italy"\ndb.customers.mobile.label=T("Mobile")\ndb.customers.mobile.requires=is_phone\ndb.customers.phone.label=T("Phone")\ndb.customers.phone.requires=is_phone\ndb.customers.fax.label=T("Fax")\ndb.customers.fax.requires=is_phone\n\n\n\ndb.define_table(\'works\',\n    Field(\'name\',\'string\'),\n    Field(\'customer\',db.customers),\n    Field(\'description\',\'string\'),\n    Field(\'assign_date\',\'date\'),\n    Field(\'due_to_date\',\'date\'),\n    Field(\'status\',\'string\'),\n    Field(\'value\',\'integer\'),\n    Field(\'cost\',\'integer\'))\n    \ndb.works.name.label=T("Name")\ndb.works.customer.label=T("Customer")\ndb.works.customer.requires=IS_IN_DB(db,\'customers.id\',\'customers.name\')\ndb.works.description.label=T("Description")\ndb.works.assign_date.label=T("Assigned")\ndb.works.due_to_date.label=T("Due To")\ndb.works.status.label=T("Status")\ndb.works.status.requires = IS_IN_SET(STATUS,[T(x) for x in STATUS])\ndb.works.status.default = "Open"\ndb.works.value.label=T("Value")\ndb.works.cost.label=T("Cost")\n\n\n\ndb.define_table(\'hours\',\n    Field(\'work\',db.works),\n    Field(\'user\',db.auth_user),\n    Field(\'type\',\'string\'),\n    Field(\'start\',\'datetime\'),\n    Field(\'finish\',\'datetime\'),\n    Field(\'note\',\'string\'))\n    \ndb.hours.work.label=T("Work")\ndb.hours.work.requires=IS_IN_DB(db,\'works.id\',\'%(name)s\')\ndb.hours.user.label=T("Worker")\ndb.hours.user.requires=IS_IN_DB(db,\'auth_user.id\',\'%(first_name)s %(last_name)s\')\ndb.hours.type.requires = IS_IN_SET(TYPES,[T(x) for x in TYPES])\ndb.hours.type.default = "Coding"\ndb.hours.start.label=T("Starting time")\ndb.hours.finish.label=T("Finishing time")\ndb.hours.note.label=T("Notes")\n\n###DEFAULT VALUES\nif not db(db.auth_group.id>0).count():\n    admin=auth.add_group(\'admin\', \'can access to all actions\')\n    auth.add_permission(admin, \'admin\')\n    auth.add_permission(admin, \'manager\')\n    auth.add_permission(admin, \'hr\')\n    auth.add_permission(admin, \'crew\')\n    manager=auth.add_group(\'manager\', \'can access to managerial actions\')\n    auth.add_permission(manager, \'manager\')\n    auth.add_permission(manager, \'crew\')\n    hr=auth.add_group(\'hr\', \'can access to all human resources action\')\n    auth.add_permission(hr, \'hr\')\n    auth.add_permission(hr, \'crew\')\n    crew=auth.add_group(\'crew\', \'can access to all basic action\')\n    auth.add_permission(crew, \'crew\')\nif not db(db.auth_membership.id>0).count():\n    for g in db(db.auth_group.role=="admin").select(db.auth_group.id):\n        for u in db(db.auth_user.id>0).select(db.auth_user.id):\n            auth.add_membership(g, u)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__module__'
p11
S"'pysqlite2.dbapi2'"
p12
sS'__getslice__'
p13
S"<method-wrapper '__getslice__' of OperationalError object>"
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of OperationalError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of OperationalError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of OperationalError object>'
p22
sS'__weakref__'
p23
S'None'
p24
sS'__init__'
p25
S"<method-wrapper '__init__' of OperationalError object>"
p26
sS'__setattr__'
p27
S"<method-wrapper '__setattr__' of OperationalError object>"
p28
sS'__reduce_ex__'
p29
S'<built-in method __reduce_ex__ of OperationalError object>'
p30
sS'__new__'
p31
S'<built-in method __new__ of type object>'
p32
sS'__format__'
p33
S'<built-in method __format__ of OperationalError object>'
p34
sS'__class__'
p35
S"<class 'pysqlite2.dbapi2.OperationalError'>"
p36
sS'__doc__'
p37
S'None'
p38
sS'__getitem__'
p39
S"<method-wrapper '__getitem__' of OperationalError object>"
p40
sS'__setstate__'
p41
S'<built-in method __setstate__ of OperationalError object>'
p42
sS'__getattribute__'
p43
S"<method-wrapper '__getattribute__' of OperationalError object>"
p44
sS'args'
p45
S"('no such table: auth_group',)"
p46
sS'__subclasshook__'
p47
S'<built-in method __subclasshook__ of type object>'
p48
sS'__unicode__'
p49
S'<built-in method __unicode__ of OperationalError object>'
p50
sS'__delattr__'
p51
S"<method-wrapper '__delattr__' of OperationalError object>"
p52
sS'__repr__'
p53
S"<method-wrapper '__repr__' of OperationalError object>"
p54
sS'__hash__'
p55
S"<method-wrapper '__hash__' of OperationalError object>"
p56
ssS'evalue'
p57
S'no such table: auth_group'
p58
sS'request'
p59
(dp60
S'function'
p61
S"'index'"
p62
sS'body'
p63
S'<cStringIO.StringO object>'
p64
sS'wsgi'
p65
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p66
sS'extension'
p67
S"'html'"
p68
sS'vars'
p69
S'<Storage {}>'
p70
sS'cid'
p71
S'None'
p72
sS'url'
p73
S"'/init/appadmin/index'"
p74
sg45
S'[]'
p75
sS'controller'
p76
S"'appadmin'"
p77
sS'cookies'
p78
S"<SimpleCookie: SN_tscristoforo='0' __llooggrvc__...'127-0-0-1-11f35f11-25ff-4548-8193-35492fa0cc92'>"
p79
sS'application'
p80
S"'init'"
p81
sS'ajax'
p82
S'False'
p83
sS'client'
p84
S"'127.0.0.1'"
p85
sS'env'
p86
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ce': False, 'path_info': '/init/appadmin/index'}>"
p87
sS'raw_args'
p88
S'None'
p89
sS'get_vars'
p90
S'<Storage {}>'
p91
sS'folder'
p92
S"'/home/web2py/new/applications/init/'"
p93
sS'now'
p94
S'datetime.datetime(2010, 9, 11, 10, 36, 21, 328976)'
p95
sS'post_vars'
p96
S'<Storage {}>'
p97
ssS'frames'
p98
(lp99
(dp100
S'file'
p101
S'/home/web2py/new/gluon/restricted.py'
p102
sS'dump'
p103
(dp104
S'environment'
p105
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p106
sS'ccode'
p107
S'<code object <module> at 0x9bd8608, file "/home/web2py/new/applications/init/models/db.py", line 3>'
p108
ssS'lnum'
p109
I186
sS'lines'
p110
(dp111
I181
S'        if type(code) == types.CodeType:'
p112
sI182
S'            ccode = code'
p113
sI183
S'        else:'
p114
sI184
S'            ccode = compile2(code,layer)'
p115
sI185
S''
sI186
S'        exec ccode in environment'
p116
sI187
S'    except HTTP:'
p117
sI188
S'        raise'
p118
sI189
S'    except Exception:'
p119
sI190
S'        # XXX Show exception in Wing IDE if running in debugger'
p120
ssS'call'
p121
S"(code='# -*- coding: utf-8 -*- \\n\\nfrom applications.init..._user.id):\\n            auth.add_membership(g, u)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}, layer='/home/web2py/new/applications/init/models/db.py')"
p122
sS'func'
p123
S'restricted'
p124
sa(dp125
g101
S'/home/web2py/new/applications/init/models/db.py'
p126
sg103
(dp127
S'db.auth_group.id'
p128
S'<gluon.sql.Field object>'
p129
sS'db'
p130
S"<SQLDB {'auth_event': <Table {'origin': <gluon.s...ption': <gluon.sql.Field object at 0x9d088ac>}>}>"
p131
sS').count'
p132
S'<bound method Field.count of <gluon.sql.Field object>>'
p133
sS'db.auth_group'
p134
S"<Table {'ALL': <gluon.sql.SQLALL object at 0x9b7...[], 'id': <gluon.sql.Field object at 0x9b7040c>}>"
p135
ssg109
I179
sg110
(dp136
I174
S'db.hours.start.label=T("Starting time")'
p137
sI175
S'db.hours.finish.label=T("Finishing time")'
p138
sI176
S'db.hours.note.label=T("Notes")'
p139
sI177
S''
sI178
S'###DEFAULT VALUES'
p140
sI179
S'if not db(db.auth_group.id>0).count():'
p141
sI180
S"    admin=auth.add_group('admin', 'can access to all actions')"
p142
sI181
S"    auth.add_permission(admin, 'admin')"
p143
sI182
S"    auth.add_permission(admin, 'manager')"
p144
sI183
S"    auth.add_permission(admin, 'hr')"
p145
ssg121
S'()'
p146
sg123
S'<module>'
p147
sa(dp148
g101
S'/home/web2py/new/gluon/sql.py'
p149
sg103
(dp150
S'self'
p151
S'<gluon.sql.Set object>'
p152
sS']._extra'
p153
S'undefined'
p154
sS'self.select'
p155
S'<bound method Set.select of <gluon.sql.Set object>>'
p156
ssg109
I3363
sg110
(dp157
I3360
S"        return self._select('count(*)')"
p158
sI3361
S''
sI3362
S'    def count(self):'
p159
sI3363
S"        return self.select('count(*)')[0]._extra['count(*)']"
p160
sI3364
S''
sI3365
S'    def _delete(self):'
p161
sI3366
S'        if len(self._tables) != 1:'
p162
sI3367
S'            raise SyntaxError, \\'
p163
sI3358
S''
sI3359
S'    def _count(self):'
p164
ssg121
S'(self=<gluon.sql.Set object>)'
p165
sg123
S'count'
p166
sa(dp167
g101
S'/home/web2py/new/gluon/sql.py'
p168
sg103
(dp169
S'query'
p170
S"'SELECT count(*) FROM auth_group WHERE auth_group.id>0;'"
p171
sS'rows'
p172
g154
sS'response'
p173
S'<function response>'
p174
ssg109
I3216
sg110
(dp175
I3211
S'            db._execute(query)'
p176
sI3212
S'            return db._cursor.fetchall()'
p177
sI3213
S''
sI3214
S"        if not attributes.get('cache', None):"
p178
sI3215
S'            query = self._select(*fields, **attributes)'
p179
sI3216
S'            rows = response(query)'
p180
sI3217
S'        else:'
p181
sI3218
S"            (cache_model, time_expire) = attributes['cache']"
p182
sI3219
S"            del attributes['cache']"
p183
sI3220
S'            query = self._select(*fields, **attributes)'
p184
ssg121
S"(self=<gluon.sql.Set object>, *fields=('count(*)',), **attributes={})"
p185
sg123
S'select'
p186
sa(dp187
g101
S'/home/web2py/new/gluon/sql.py'
p188
sg103
(dp189
S'query'
p190
S"'SELECT count(*) FROM auth_group WHERE auth_group.id>0;'"
p191
sS'db'
p192
S"<SQLDB {'auth_event': <Table {'origin': <gluon.s...ption': <gluon.sql.Field object at 0x9d088ac>}>}>"
p193
sS'db._execute'
p194
S'<function <lambda>>'
p195
ssg109
I3211
sg110
(dp196
I3206
S'        """'
p197
sI3207
S''
sI3208
S'        db=self._db'
p198
sI3209
S'        def response(query):'
p199
sI3210
S"            db['_lastsql'] = query"
p200
sI3211
S'            db._execute(query)'
p201
sI3212
S'            return db._cursor.fetchall()'
p202
sI3213
S''
sI3214
S"        if not attributes.get('cache', None):"
p203
sI3215
S'            query = self._select(*fields, **attributes)'
p204
ssg121
S"(query='SELECT count(*) FROM auth_group WHERE auth_group.id>0;')"
p205
sg123
S'response'
p206
sa(dp207
g101
S'/home/web2py/new/gluon/sql.py'
p208
sg103
(dp209
S'a'
S"('SELECT count(*) FROM auth_group WHERE auth_group.id>0;',)"
p210
sS'b'
g20
sS'self._execute'
p211
S'<function <lambda>>'
p212
sS'self'
p213
S"<SQLDB {'auth_event': <Table {'origin': <gluon.s...ption': <gluon.sql.Field object at 0x9d088ac>}>}>"
p214
sS'self._cursor'
p215
S'<pysqlite2.dbapi2.Cursor object>'
p216
sS'self._cursor.execute'
p217
S'<built-in method execute of pysqlite2.dbapi2.Cursor object>'
p218
ssg109
I947
sg110
(dp219
I942
S'                                           check_same_thread=False))'
p220
sI943
S"            self._connection.create_function('web2py_extract', 2,"
p221
sI944
S'                                             sqlite3_web2py_extract)'
p222
sI945
S'            # self._connection.row_factory = sqlite3.Row'
p223
sI946
S'            self._cursor = self._connection.cursor()'
p224
sI947
S'            self._execute = lambda *a, **b: self._cursor.execute(*a, **b)'
p225
sI948
S"        elif self._uri.startswith('mysql://'):"
p226
sI949
S"            self._dbname = 'mysql'"
p227
sI950
S"            m = re.compile('^(?P<user>[^:@]+)(\\:(?P<passwd>[^@]*))?@(?P<host>[^\\:/]+)(\\:(?P<port>[0-9]+))?/(?P<db>[^?]+)(\\?set_encoding=(?P<charset>\\w+))?$'"
p228
sI951
S'                ).match(self._uri[8:])'
p229
ssg121
S"(*a=('SELECT count(*) FROM auth_group WHERE auth_group.id>0;',), **b={})"
p230
sg123
S'<lambda>'
p231
sasS'pyver'
p232
S'Python 2.6.5: /usr/bin/python'
p233
sS'session'
p234
(dp235
S'flash'
p236
S'None'
p237
sS'auth'
p238
S"<Storage {'expiration': 108000, 'user': <Storage...0, 9, 11, 10, 36, 21, 328976), 'remember': True}>"
p239
sS'_formkey[login]'
p240
S"'5c042e76-b237-4a52-bf01-9aca9f3c3d9c'"
p241
ssS'etype'
p242
S"<class 'pysqlite2.dbapi2.OperationalError'>"
p243
sS'date'
p244
S'Sat Sep 11 10:36:21 2010'
p245
sg206
(dp246
S'status'
p247
S'200'
p248
sg63
S'<cStringIO.StringO object>'
p249
sg78
S"<SimpleCookie: session_id_init='127-0-0-1-11f35f11-25ff-4548-8193-35492fa0cc92'>"
p250
sS'_vars'
p251
S'None'
p252
sS'session_file'
p253
S"<open file '/home/web2py/new/applications/init/s...1f35f11-25ff-4548-8193-35492fa0cc92', mode 'rb+'>"
p254
sS'flash'
p255
S"''"
p256
sS'_custom_rollback'
p257
S'None'
p258
sS'session_id'
p259
S"'127-0-0-1-11f35f11-25ff-4548-8193-35492fa0cc92'"
p260
sS'headers'
p261
S"<Storage {'Expires': 'Sat, 11 Sep 2010 08:36:21 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p262
sS'meta'
p263
S'<Storage {}>'
p264
sS'session_filename'
p265
S"'/home/web2py/new/applications/init/sessions/127-0-0-1-11f35f11-25ff-4548-8193-35492fa0cc92'"
p266
sS'postprocessing'
p267
S'[]'
p268
sS'menu'
p269
S'[]'
p270
sS'_view_environment'
p271
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p272
sS'session_id_name'
p273
S"'session_id_init'"
p274
sS'_custom_commit'
p275
S'None'
p276
sS'_caller'
p277
S'<function <lambda>>'
p278
sS'files'
p279
S'[]'
p280
sS'view'
p281
S"'appadmin/index.html'"
p282
ssS'locals'
p283
(dp284
S'a'
S"('SELECT count(*) FROM auth_group WHERE auth_group.id>0;',)"
p285
sS'self'
p286
S"<SQLDB {'auth_event': <Table {'origin': <gluon.s...ption': <gluon.sql.Field object at 0x9d088ac>}>}>"
p287
sS'b'
g20
sssS'traceback'
p288
S'Traceback (most recent call last):\n  File "/home/web2py/new/gluon/restricted.py", line 186, in restricted\n    exec ccode in environment\n  File "/home/web2py/new/applications/init/models/db.py", line 179, in <module>\n    if not db(db.auth_group.id>0).count():\n  File "/home/web2py/new/gluon/sql.py", line 3363, in count\n    return self.select(\'count(*)\')[0]._extra[\'count(*)\']\n  File "/home/web2py/new/gluon/sql.py", line 3216, in select\n    rows = response(query)\n  File "/home/web2py/new/gluon/sql.py", line 3211, in response\n    db._execute(query)\n  File "/home/web2py/new/gluon/sql.py", line 947, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\nOperationalError: no such table: auth_group\n'
p289
s.