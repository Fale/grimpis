(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/web2py/applications/isys/controllers/plugin_editable_jqgrid.py'
p4
sS'code'
p5
S'import cgi\n\ndef contains_html(field):\n    return field.__dict__.has_key(\'contains_html\') and field.contains_html\ndef non_textfield(field):\n    return field.type!="string" and field.type!="text"\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n\n@service.json\ndef save_row():\n    table=get_db()[request.args[2]]\n    if request.vars.oper==\'edit\':\n        from gluon.storage import Storage\n        cust=Storage()\n        \n        for f in table.fields:\n            if request.vars.has_key(f) and f!=\'id\':\n                #here non-html fields are escaped\n                field=table[f]\n                value=request.vars[f]\n                if value==\'\' and field.default and request.vars.id==\'new\': \n                    value=field.default\n                    \n                if non_textfield(field) or contains_html(field):\n                    cust[f]=value                        \n                else:\n                    cust[f]=cgi.escape(value)                        \n\n        if request.args[4]!=\'None\':\n            cust[request.args[4]]=request.args[5]\n            \n        if request.vars.id==\'new\':\n            return dict(Id=table.insert(**cust))\n        else:\n            get_db()(table.id==request.vars.id).update(**cust)\n            return dict(Id=request.vars.id)\n    else:\n        if request.vars.oper==\'del\':\n            for del_id in request.vars.id.split(\',\'):\n                get_db()(table.id==del_id).delete()\n            \ndef get_db():\n    return eval(request.args[3])\n\n@service.json\ndef get_rows():\n    table=get_db()[request.args[2]]\n    fields = table.fields\n    rows = []\n    page = int(request.vars.page)\n    pagesize = int(request.vars.rows)    \n    limitby = (page * pagesize - pagesize,page * pagesize)\n    orderby = table[request.vars.sidx]\n    if orderby and request.vars.sord == \'desc\': orderby = ~orderby\n    \n    filter_field_name=request.args[5]    \n    filter_field_value=request.args[6]    \n    id_represent=\'\'\n    from StringIO import StringIO     \n    out=StringIO(id_represent)\n    import cgi\n    \n    \n    if request.args[8]==\'None\':\n        id_represent=\'%(id)s\' \n    else:\n        cgi.mimetools.decode(StringIO(request.args[8]),out,\'base64\')\n        id_represent=out.getvalue()\n        id_represent=\'<a href="%s">%s</a>\' %(id_represent,request.args[7])\n        \n    field_names=request.args[4].split(\'@\')\n    \n    fields=[table[f] for f in field_names]\n    \n    searchField=request.vars.searchField\n    searchString=request.vars.searchString\n    searchOper={\'eq\':lambda a,b: a==b,\n                \'nq\':lambda a,b: a!=b,\n                \'gt\':lambda a,b: a>b,\n                \'ge\':lambda a,b: a>=b,\n                \'lt\':lambda a,b: a<b,\n                \'le\':lambda a,b: a<=b,\n                \'bw\':lambda a,b: a.like(b+\'%\'),\n                \'bn\':lambda a,b: ~a.like(b+\'%\'),\n                \'ew\':lambda a,b: a.like(\'%\'+b),\n                \'en\':lambda a,b: ~a.like(\'%\'+b),\n                \'cn\':lambda a,b: a.like(\'%\'+b+\'%\'),\n                \'nc\':lambda a,b: ~a.like(\'%\'+b+\'%\'),\n                \'in\':lambda a,b: a.belongs(b.split()),\n                \'ni\':lambda a,b: ~a.belongs(b.split())}\\\n                [request.vars.searchOper or \'eq\']\n    \n    if filter_field_name!=\'None\':\n        dbset = get_db()(table[filter_field_name]==filter_field_value)\n    else:\n        dbset = get_db()(table.id>0)\n        \n    if searchField: dbset=dbset(searchOper(table[searchField],searchString))    \n    \n    for r in dbset.select(limitby=limitby,orderby=orderby):\n        vals = []\n        for f in fields:\n            if f.name ==\'id\':\n                vals.append(id_represent % r)\n            else:\n                rep = f.represent\n                #if rep:\n                #    vals.append(rep(r[f.name]))\n                #else:\n                vals.append(r[f.name])\n        rows.append(dict(id=r.id,cell=vals))\n    total = get_db()(table.id>0).count()       \n    pages = int(total/pagesize)\n    if total % pagesize > 0: pages += 1 \n    data = dict(total=pages,page=page,rows=rows)\n    return data\n\nresponse._vars=response._caller(call)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/web2py/gluon/restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "/home/web2py/applications/isys/controllers/plugin_editable_jqgrid.py", line 128, in <module>\n  File "/home/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/web2py/applications/isys/controllers/plugin_editable_jqgrid.py", line 16, in call\n    return service()\n  File "/home/web2py/gluon/tools.py", line 3438, in __call__\n    return self.serve_json(request.args[1:])\n  File "/home/web2py/gluon/tools.py", line 3328, in serve_json\n    s = universal_caller(self.json_procedures[args[0]],*args[1:],**d)\n  File "/home/web2py/gluon/tools.py", line 3047, in universal_caller\n    return f(**b)\n  File "/home/web2py/applications/isys/controllers/plugin_editable_jqgrid.py", line 43, in save_row\n    return dict(Id=table.insert(**cust))\n  File "/home/web2py/gluon/sql.py", line 1933, in insert\n    query = self._insert(**fields)\n  File "/home/web2py/gluon/sql.py", line 1914, in _insert\n    vs.append(sql_represent(value, ft, fd, self._db._db_codec))\n  File "/home/web2py/gluon/sql.py", line 513, in sql_represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'ciao\'\n'
p8
s.